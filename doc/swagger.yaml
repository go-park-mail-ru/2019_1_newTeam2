swagger: "2.0"
info:
  description: "This is our api for word trainer app"
  version: "1.0.0"
  title: "Word Trainer"
host: "thawing-gorge-14317.herokuapp.com"
tags:
- name: "users"
  description: "Everything about your users"
- name: "login"
  description: "login to app"
- name: "signup"
  description: "sign up to app"
- name: "upload"
  description: "uploading files"
schemes:
- "https"
- "http"
paths:
  /users:
    get:
      tags:
      - "users"
      summary: "Gets users list for leaderboard"
      operationId: "GetUsers"
      parameters:
      - name: "rows"
        in: "query"
        required: true
        type: "integer"
        description: "rows per page"
      - name: "page"
        in: "query"
        required: true
        type: "integer"
        description: "page sequence number"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserForTable"
        400:
          description: "Invalid status value"
  /users/{userId}:
    get:
      tags:
      - "users"
      summary: "Get profile of other user"
      operationId: "GetUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/User"
        400:
          description: "Error while searching for user"
  /users/me:
    get:
      tags:
      - "users"
      summary: "Get profile info"
      operationId: "GetProfile"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/User"
        400:
          description: "Error while searching for user"
    put:
      tags:
      - "users"
      summary: "Update user info"
      operationId: "UpdateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/User"
        400:
          description: "Error while searching for user"
    delete:
      tags: 
      -  "users"
      summary: "Delete user profile"
      operationId: "DeleteUser"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: OK
        400:
          description: "Cannot understand path"
        500:
          description: "Error happened"
        404:
          description: "No such user"
        
  /upload/avatar/:
    post:
      tags:
      - "upload"
      summary: "Upload an avatar for user"
      operationId: "UploadAvatar"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "userId"
        in: "header"
        required: true
        type: "integer"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: OK
        400:
          description: "Error in the path"
        500:
          description: "Error while uploading the file"
        
  /signup/:
    post:
      summary: "signing up api"
      tags:
      - "signup"
      consumes: 
      - "application/json"
      parameters: 
      - in: "body"
        name: "body"
        description: "user object to register"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
              type: string
              description: "token, that will be cookie, change that field, dunno how in headers"
        400:
          description: "Error in request"
          
  /login/:
    post:
      summary: "login api"
      tags:
      - "login"
      consumes: 
      - "application/json"
      parameters: 
      - in: "body"
        name: "body"
        description: "user object to login"
        required: true
        schema:
          $ref: "#/definitions/UserAuth"
      responses:
        200:
          description: "successful operation"
          schema:
              type: string
              description: "token, that will be cookie, change that field, dunno how in headers"
        400:
          description: "Eroor in request"
        401:
          description: "Cannot login user"
          
  /auth/:
    get:
      summary: "check if authorized"
      tags:
      - "auth"
      responses:
        200:
          description: "logined"
        401:
          description: "not logined"
          
    delete:
      summary: "unlogin"
      tags:
      - "auth"
      responses:
        200:
          description: "done"
    

definitions:

  UserForTable:
    type: "object"
    properties:
      username:
        type: "string"
      score:
        type: "integer"
        format: "int32"
        description: "number of points"
        
  UserAuth:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      username:
        type: "string"
      email:
        type: "string"
      langID:
        type: "integer"
      pronounceOn:
        type: "integer"
        description: "if pronounciation for user is available"
      score:
        type: "integer"
        format: "int32"
        description: "number of points"