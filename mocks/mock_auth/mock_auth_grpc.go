// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/apps/authorization/authorization.pb.go

// Package mock_authorization is a generated GoMock package.

package mock_auth

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	x "github.com/user/2019_1_newTeam2/pkg/apps/authorization"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthCheckerClient is a mock of AuthCheckerClient interface
type MockAuthCheckerClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthCheckerClientMockRecorder
}

// MockAuthCheckerClientMockRecorder is the mock recorder for MockAuthCheckerClient
type MockAuthCheckerClientMockRecorder struct {
	mock *MockAuthCheckerClient
}

// NewMockAuthCheckerClient creates a new mock instance
func NewMockAuthCheckerClient(ctrl *gomock.Controller) *MockAuthCheckerClient {
	mock := &MockAuthCheckerClient{ctrl: ctrl}
	mock.recorder = &MockAuthCheckerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthCheckerClient) EXPECT() *MockAuthCheckerClientMockRecorder {
	return m.recorder
}

// GetIdFromCookie mocks base method
func (m *MockAuthCheckerClient) GetIdFromCookie(ctx context.Context, in *x.AuthCookie, opts ...grpc.CallOption) (*x.Id, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdFromCookie", varargs...)
	ret0, _ := ret[0].(*x.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdFromCookie indicates an expected call of GetIdFromCookie
func (mr *MockAuthCheckerClientMockRecorder) GetIdFromCookie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdFromCookie", reflect.TypeOf((*MockAuthCheckerClient)(nil).GetIdFromCookie), varargs...)
}

// GetUsernameFromCookie mocks base method
func (m *MockAuthCheckerClient) GetUsernameFromCookie(ctx context.Context, in *x.AuthCookie, opts ...grpc.CallOption) (*x.Username, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsernameFromCookie", varargs...)
	ret0, _ := ret[0].(*x.Username)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsernameFromCookie indicates an expected call of GetUsernameFromCookie
func (mr *MockAuthCheckerClientMockRecorder) GetUsernameFromCookie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernameFromCookie", reflect.TypeOf((*MockAuthCheckerClient)(nil).GetUsernameFromCookie), varargs...)
}

// MockAuthCheckerServer is a mock of AuthCheckerServer interface
type MockAuthCheckerServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthCheckerServerMockRecorder
}

// MockAuthCheckerServerMockRecorder is the mock recorder for MockAuthCheckerServer
type MockAuthCheckerServerMockRecorder struct {
	mock *MockAuthCheckerServer
}

// NewMockAuthCheckerServer creates a new mock instance
func NewMockAuthCheckerServer(ctrl *gomock.Controller) *MockAuthCheckerServer {
	mock := &MockAuthCheckerServer{ctrl: ctrl}
	mock.recorder = &MockAuthCheckerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthCheckerServer) EXPECT() *MockAuthCheckerServerMockRecorder {
	return m.recorder
}

// GetIdFromCookie mocks base method
func (m *MockAuthCheckerServer) GetIdFromCookie(arg0 context.Context, arg1 *x.AuthCookie) (*x.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdFromCookie", arg0, arg1)
	ret0, _ := ret[0].(*x.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdFromCookie indicates an expected call of GetIdFromCookie
func (mr *MockAuthCheckerServerMockRecorder) GetIdFromCookie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdFromCookie", reflect.TypeOf((*MockAuthCheckerServer)(nil).GetIdFromCookie), arg0, arg1)
}

// GetUsernameFromCookie mocks base method
func (m *MockAuthCheckerServer) GetUsernameFromCookie(arg0 context.Context, arg1 *x.AuthCookie) (*x.Username, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsernameFromCookie", arg0, arg1)
	ret0, _ := ret[0].(*x.Username)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsernameFromCookie indicates an expected call of GetUsernameFromCookie
func (mr *MockAuthCheckerServerMockRecorder) GetUsernameFromCookie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernameFromCookie", reflect.TypeOf((*MockAuthCheckerServer)(nil).GetUsernameFromCookie), arg0, arg1)
}
