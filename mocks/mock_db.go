// Code generated by MockGen. DO NOT EDIT.
// Source: storage/db_interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/user/2019_1_newTeam2/models"
	reflect "reflect"
)

// MockUserManager is a mock of UserManager interface
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockUserManager) Login(username, password string, secret []byte) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password, secret)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login
func (mr *MockUserManagerMockRecorder) Login(username, password, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserManager)(nil).Login), username, password, secret)
}

// GetUserByID mocks base method
func (m *MockUserManager) GetUserByID(userID int) (models.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockUserManagerMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserManager)(nil).GetUserByID), userID)
}

// UserRegistration mocks base method
func (m *MockUserManager) UserRegistration(username, email, password string, langid, pronounceOn int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegistration", username, email, password, langid, pronounceOn)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegistration indicates an expected call of UserRegistration
func (mr *MockUserManagerMockRecorder) UserRegistration(username, email, password, langid, pronounceOn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegistration", reflect.TypeOf((*MockUserManager)(nil).UserRegistration), username, email, password, langid, pronounceOn)
}

// DeleteUserById mocks base method
func (m *MockUserManager) DeleteUserById(userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserById indicates an expected call of DeleteUserById
func (mr *MockUserManagerMockRecorder) DeleteUserById(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockUserManager)(nil).DeleteUserById), userID)
}

// GetUsers mocks base method
func (m *MockUserManager) GetUsers(page, rowsNum int) ([]models.UserTableElem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", page, rowsNum)
	ret0, _ := ret[0].([]models.UserTableElem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockUserManagerMockRecorder) GetUsers(page, rowsNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserManager)(nil).GetUsers), page, rowsNum)
}

// AddImage mocks base method
func (m *MockUserManager) AddImage(path string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", path, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImage indicates an expected call of AddImage
func (mr *MockUserManagerMockRecorder) AddImage(path, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockUserManager)(nil).AddImage), path, userID)
}

// UpdateUserById mocks base method
func (m *MockUserManager) UpdateUserById(userID int, username, email, password string, langid, pronounceOn int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserById", userID, username, email, password, langid, pronounceOn)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserById indicates an expected call of UpdateUserById
func (mr *MockUserManagerMockRecorder) UpdateUserById(userID, username, email, password, langid, pronounceOn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserById", reflect.TypeOf((*MockUserManager)(nil).UpdateUserById), userID, username, email, password, langid, pronounceOn)
}

// MockDBInterface is a mock of DBInterface interface
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockDBInterface) Login(username, password string, secret []byte) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password, secret)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login
func (mr *MockDBInterfaceMockRecorder) Login(username, password, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDBInterface)(nil).Login), username, password, secret)
}

// GetUserByID mocks base method
func (m *MockDBInterface) GetUserByID(userID int) (models.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockDBInterfaceMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDBInterface)(nil).GetUserByID), userID)
}

// UserRegistration mocks base method
func (m *MockDBInterface) UserRegistration(username, email, password string, langid, pronounceOn int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegistration", username, email, password, langid, pronounceOn)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegistration indicates an expected call of UserRegistration
func (mr *MockDBInterfaceMockRecorder) UserRegistration(username, email, password, langid, pronounceOn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegistration", reflect.TypeOf((*MockDBInterface)(nil).UserRegistration), username, email, password, langid, pronounceOn)
}

// DeleteUserById mocks base method
func (m *MockDBInterface) DeleteUserById(userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserById indicates an expected call of DeleteUserById
func (mr *MockDBInterfaceMockRecorder) DeleteUserById(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockDBInterface)(nil).DeleteUserById), userID)
}

// GetUsers mocks base method
func (m *MockDBInterface) GetUsers(page, rowsNum int) ([]models.UserTableElem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", page, rowsNum)
	ret0, _ := ret[0].([]models.UserTableElem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockDBInterfaceMockRecorder) GetUsers(page, rowsNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockDBInterface)(nil).GetUsers), page, rowsNum)
}

// AddImage mocks base method
func (m *MockDBInterface) AddImage(path string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", path, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImage indicates an expected call of AddImage
func (mr *MockDBInterfaceMockRecorder) AddImage(path, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockDBInterface)(nil).AddImage), path, userID)
}

// UpdateUserById mocks base method
func (m *MockDBInterface) UpdateUserById(userID int, username, email, password string, langid, pronounceOn int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserById", userID, username, email, password, langid, pronounceOn)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserById indicates an expected call of UpdateUserById
func (mr *MockDBInterfaceMockRecorder) UpdateUserById(userID, username, email, password, langid, pronounceOn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserById", reflect.TypeOf((*MockDBInterface)(nil).UpdateUserById), userID, username, email, password, langid, pronounceOn)
}
