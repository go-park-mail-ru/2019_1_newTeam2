// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels(in *jlexer.Lexer, out *Cards) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Cards, 0, 2)
			} else {
				*out = Cards{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Card
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels(out *jwriter.Writer, in Cards) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Cards) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cards) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cards) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cards) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels(l, v)
}
func easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels1(in *jlexer.Lexer, out *CardFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "word":
			if in.IsNull() {
				in.Skip()
				out.Word = nil
			} else {
				if out.Word == nil {
					out.Word = new(WordFull)
				}
				(*out.Word).UnmarshalEasyJSON(in)
			}
		case "translation":
			if in.IsNull() {
				in.Skip()
				out.Translation = nil
			} else {
				if out.Translation == nil {
					out.Translation = new(WordFull)
				}
				(*out.Translation).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels1(out *jwriter.Writer, in CardFull) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"word\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Word == nil {
			out.RawString("null")
		} else {
			(*in.Word).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"translation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Translation == nil {
			out.RawString("null")
		} else {
			(*in.Translation).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardFull) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels1(l, v)
}
func easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels2(in *jlexer.Lexer, out *CardDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dictionaryId":
			out.DictionaryId = int(in.Int())
		case "cardId":
			out.CardId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels2(out *jwriter.Writer, in CardDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dictionaryId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DictionaryId))
	}
	{
		const prefix string = ",\"cardId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CardId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels2(l, v)
}
func easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels3(in *jlexer.Lexer, out *Card) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "word":
			if in.IsNull() {
				in.Skip()
				out.Word = nil
			} else {
				if out.Word == nil {
					out.Word = new(Word)
				}
				(*out.Word).UnmarshalEasyJSON(in)
			}
		case "translation":
			if in.IsNull() {
				in.Skip()
				out.Translation = nil
			} else {
				if out.Translation == nil {
					out.Translation = new(Word)
				}
				(*out.Translation).UnmarshalEasyJSON(in)
			}
		case "frequency":
			out.Frequency = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels3(out *jwriter.Writer, in Card) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"word\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Word == nil {
			out.RawString("null")
		} else {
			(*in.Word).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"translation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Translation == nil {
			out.RawString("null")
		} else {
			(*in.Translation).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"frequency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Frequency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Card) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Card) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFfcccb8aEncodeGithubComUser20191NewTeam2SharedModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Card) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Card) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFfcccb8aDecodeGithubComUser20191NewTeam2SharedModels3(l, v)
}
