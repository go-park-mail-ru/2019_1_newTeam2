// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels(in *jlexer.Lexer, out *GameWords) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GameWords, 0, 1)
			} else {
				*out = GameWords{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 GameWord
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels(out *jwriter.Writer, in GameWords) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GameWords) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameWords) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameWords) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameWords) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels(l, v)
}
func easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels1(in *jlexer.Lexer, out *GameWord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.CardId = int(in.Int())
		case "word":
			out.Word = string(in.String())
		case "variants":
			if in.IsNull() {
				in.Skip()
				out.Variants = nil
			} else {
				in.Delim('[')
				if out.Variants == nil {
					if !in.IsDelim(']') {
						out.Variants = make([]string, 0, 4)
					} else {
						out.Variants = []string{}
					}
				} else {
					out.Variants = (out.Variants)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Variants = append(out.Variants, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "correct":
			out.Correct = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels1(out *jwriter.Writer, in GameWord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CardId))
	}
	{
		const prefix string = ",\"word\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Word))
	}
	if len(in.Variants) != 0 {
		const prefix string = ",\"variants\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Variants {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"correct\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Correct))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameWord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameWord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameWord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameWord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels1(l, v)
}
func easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels2(in *jlexer.Lexer, out *GameResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GameResults, 0, 4)
			} else {
				*out = GameResults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 GameResult
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels2(out *jwriter.Writer, in GameResults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GameResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels2(l, v)
}
func easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels3(in *jlexer.Lexer, out *GameResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "correct":
			out.Correct = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels3(out *jwriter.Writer, in GameResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"correct\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Correct))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels3(l, v)
}
func easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels4(in *jlexer.Lexer, out *GameQuestions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GameQuestions, 0, 1)
			} else {
				*out = GameQuestions{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 GameQuestion
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels4(out *jwriter.Writer, in GameQuestions) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GameQuestions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameQuestions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameQuestions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameQuestions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels4(l, v)
}
func easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels5(in *jlexer.Lexer, out *GameQuestion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "words":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v13 := 0
				for !in.IsDelim(']') {
					if v13 < 4 {
						(out.Words)[v13] = string(in.String())
						v13++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "answer":
			out.Answer = string(in.String())
		case "question":
			out.Question = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels5(out *jwriter.Writer, in GameQuestion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"words\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v14 := range in.Words {
			if v14 > 0 {
				out.RawByte(',')
			}
			out.String(string((in.Words)[v14]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"answer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Answer))
	}
	{
		const prefix string = ",\"question\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Question))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameQuestion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameQuestion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComUser20191NewTeam2SharedModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameQuestion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameQuestion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComUser20191NewTeam2SharedModels5(l, v)
}
